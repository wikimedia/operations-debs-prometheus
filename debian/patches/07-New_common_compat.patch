Backport parts of commit 4d9b917d111f3ad0e0f482a42fe5930d47742d94 that solve a
build failure with the newest version of the common library.

--- a/web/api/v1/api.go
+++ b/web/api/v1/api.go
@@ -102,7 +102,6 @@
 	targetRetriever       targetRetriever
 	alertmanagerRetriever alertmanagerRetriever
 
-	context func(r *http.Request) context.Context
 	now     func() model.Time
 }
 
@@ -113,7 +112,6 @@
 		Storage:               st,
 		targetRetriever:       tr,
 		alertmanagerRetriever: ar,
-		context:               route.Context,
 		now:                   model.Now,
 	}
 }
@@ -171,7 +169,7 @@
 		ts = api.now()
 	}
 
-	ctx := api.context(r)
+	ctx := r.Context()
 	if to := r.FormValue("timeout"); to != "" {
 		var cancel context.CancelFunc
 		timeout, err := parseDuration(to)
@@ -237,7 +235,7 @@
 		return nil, &apiError{errorBadData, err}
 	}
 
-	ctx := api.context(r)
+	ctx := r.Context()
 	if to := r.FormValue("timeout"); to != "" {
 		var cancel context.CancelFunc
 		timeout, err := parseDuration(to)
@@ -271,7 +269,7 @@
 }
 
 func (api *API) labelValues(r *http.Request) (interface{}, *apiError) {
-	name := route.Param(api.context(r), "name")
+	name := route.Param(r.Context(), "name")
 
 	if !model.LabelNameRE.MatchString(name) {
 		return nil, &apiError{errorBadData, fmt.Errorf("invalid label name: %q", name)}
@@ -282,7 +280,7 @@
 	}
 	defer q.Close()
 
-	vals, err := q.LabelValuesForLabelName(api.context(r), model.LabelName(name))
+	vals, err := q.LabelValuesForLabelName(r.Context(), model.LabelName(name))
 	if err != nil {
 		return nil, &apiError{errorExec, err}
 	}
@@ -334,7 +332,7 @@
 	}
 	defer q.Close()
 
-	res, err := q.MetricsForLabelMatchers(api.context(r), start, end, matcherSets...)
+	res, err := q.MetricsForLabelMatchers(r.Context(), start, end, matcherSets...)
 	if err != nil {
 		return nil, &apiError{errorExec, err}
 	}
--- a/web/api/v1/api_test.go
+++ b/web/api/v1/api_test.go
@@ -479,15 +479,12 @@
 		for p, v := range test.params {
 			ctx = route.WithParam(ctx, p, v)
 		}
-		api.context = func(r *http.Request) context.Context {
-			return ctx
-		}
 
 		req, err := http.NewRequest("ANY", fmt.Sprintf("http://example.com?%s", test.query.Encode()), nil)
 		if err != nil {
 			t.Fatal(err)
 		}
-		resp, apiErr := test.endpoint(req)
+		resp, apiErr := test.endpoint(req.WithContext(ctx))
 		if apiErr != nil {
 			if test.errType == errorNone {
 				t.Fatalf("Unexpected error: %s", apiErr)
@@ -699,7 +696,7 @@
 }
 
 func TestOptionsMethod(t *testing.T) {
-	r := route.New(nil)
+	r := route.New()
 	api := &API{}
 	api.Register(r)
 
--- a/web/web.go
+++ b/web/web.go
@@ -125,10 +125,7 @@
 
 // New initializes a new web Handler.
 func New(o *Options) *Handler {
-	router := route.New(func(r *http.Request) (context.Context, error) {
-		return o.Context, nil
-	})
-
+	router := route.New()
 	cwd, err := os.Getwd()
 
 	if err != nil {
@@ -265,7 +262,7 @@
 }
 
 func (h *Handler) consoles(w http.ResponseWriter, r *http.Request) {
-	ctx := route.Context(r)
+	ctx := r.Context()
 	name := route.Param(ctx, "filepath")
 
 	file, err := http.Dir(h.options.ConsoleTemplatesPath).Open(name)
