Description: Disable pprof support until dependency is packaged.
--- a/cmd/promtool/debug.go
+++ b/cmd/promtool/debug.go
@@ -11,6 +11,8 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
+// +build ignore
+
 package main
 
 import (
--- a/cmd/promtool/main.go
+++ b/cmd/promtool/main.go
@@ -81,7 +81,7 @@
 	querySeriesMatch := querySeriesCmd.Flag("match", "Series selector. Can be specified multiple times.").Required().Strings()
 	querySeriesBegin := querySeriesCmd.Flag("start", "Start time (RFC3339 or Unix timestamp).").String()
 	querySeriesEnd := querySeriesCmd.Flag("end", "End time (RFC3339 or Unix timestamp).").String()
-
+/*
 	debugCmd := app.Command("debug", "Fetch debug information.")
 	debugPprofCmd := debugCmd.Command("pprof", "Fetch profiling debug information.")
 	debugPprofServer := debugPprofCmd.Arg("server", "Prometheus server to get pprof files from.").Required().String()
@@ -89,7 +89,7 @@
 	debugMetricsServer := debugMetricsCmd.Arg("server", "Prometheus server to get metrics from.").Required().String()
 	debugAllCmd := debugCmd.Command("all", "Fetch all debug information.")
 	debugAllServer := debugAllCmd.Arg("server", "Prometheus server to get all debug information from.").Required().String()
-
+*/
 	queryLabelsCmd := queryCmd.Command("labels", "Run labels query.")
 	queryLabelsServer := queryLabelsCmd.Arg("server", "Prometheus server to query.").Required().URL()
 	queryLabelsName := queryLabelsCmd.Arg("name", "Label name to provide label values for.").Required().String()
@@ -122,7 +122,7 @@
 
 	case querySeriesCmd.FullCommand():
 		os.Exit(QuerySeries(*querySeriesServer, *querySeriesMatch, *querySeriesBegin, *querySeriesEnd))
-
+/*
 	case debugPprofCmd.FullCommand():
 		os.Exit(debugPprof(*debugPprofServer))
 
@@ -131,7 +131,7 @@
 
 	case debugAllCmd.FullCommand():
 		os.Exit(debugAll(*debugAllServer))
-
+*/
 	case queryLabelsCmd.FullCommand():
 		os.Exit(QueryLabels(*queryLabelsServer, *queryLabelsName))
 
@@ -573,7 +573,7 @@
 	}
 	return time.Time{}, fmt.Errorf("cannot parse %q to a valid timestamp", s)
 }
-
+/*
 func debugPprof(url string) int {
 	w, err := newDebugWriter(debugWriterConfig{
 		serverURL:   url,
@@ -630,3 +630,4 @@
 	}
 	return w.Write()
 }
+*/
