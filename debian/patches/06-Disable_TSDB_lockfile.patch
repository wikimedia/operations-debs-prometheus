Description: Stop creating a tsdb lockfile by default.
 Replace storage.tsdb.no-lockfile flag with storage.tsdb.use-lockfile, so the
 default is not to create a lockfile, while still allowing people to request
 the feature.

Index: prometheus/cmd/prometheus/main.go
===================================================================
--- prometheus.orig/cmd/prometheus/main.go
+++ prometheus/cmd/prometheus/main.go
@@ -197,8 +197,8 @@ func main() {
 	a.Flag("storage.tsdb.retention.size", "[EXPERIMENTAL] Maximum number of bytes that can be stored for blocks. Units supported: KB, MB, GB, TB, PB. This flag is experimental and can be changed in future releases.").
 		Default("0").BytesVar(&cfg.tsdb.MaxBytes)
 
-	a.Flag("storage.tsdb.no-lockfile", "Do not create lockfile in data directory.").
-		Default("false").BoolVar(&cfg.tsdb.NoLockfile)
+	a.Flag("storage.tsdb.use-lockfile", "Create a lockfile in data directory.").
+		Default("false").BoolVar(&cfg.tsdb.UseLockfile)
 
 	a.Flag("storage.remote.flush-deadline", "How long to wait flushing sample on shutdown or config reload.").
 		Default("1m").PlaceHolder("<duration>").SetValue(&cfg.RemoteFlushDeadline)
Index: prometheus/storage/tsdb/tsdb.go
===================================================================
--- prometheus.orig/storage/tsdb/tsdb.go
+++ prometheus/storage/tsdb/tsdb.go
@@ -124,8 +124,8 @@ type Options struct {
 	// Maximum number of bytes to be retained.
 	MaxBytes units.Base2Bytes
 
-	// Disable creation and consideration of lockfile.
-	NoLockfile bool
+	// Enable creation and consideration of lockfile.
+	UseLockfile bool
 }
 
 var (
@@ -189,7 +189,7 @@ func Open(path string, l log.Logger, r p
 		RetentionDuration: uint64(time.Duration(opts.RetentionDuration).Seconds() * 1000),
 		MaxBytes:          int64(opts.MaxBytes),
 		BlockRanges:       rngs,
-		NoLockfile:        opts.NoLockfile,
+		NoLockfile:        !opts.UseLockfile,
 	})
 	if err != nil {
 		return nil, err
